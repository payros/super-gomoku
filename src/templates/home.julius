//Set default settings
var SETTINGS = {
	"BOARD_DIMENSIONS":[#{rawJS $ show $ dimM dim}, #{rawJS $ show $ dimN dim}],
	"TILES_TO_WIN":#{rawJS $ show $ dimK dim},
	"TIMEOUT":30 //In seconds - TO DO, pull this from the backend once it's stored there	
};

//When page ready
$(function(){

	////**** GLOBAL VARIABLES ****////

	var TIME, TIMER;
	var BOARD = makeEmptyBoard();
	var TURN = 'X';
	var WHO_STARTS_NEXT = 'O';
	var SCORES = [0,0];
	var PLAYERS = ['Player1', 'Player2'];
	var BOTS = #{rawJS $ show $ playersList};
	SETTINGS = localStorage.settings ? JSON.parse(localStorage.settings) : SETTINGS;

	////**** UTILITY FUNCTIONS ****////

	function makeEmptyBoard() {
		var board = [];
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			board.push([]);
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				board[row].push(' ');
			}
		}
		return board;
	}

	//Returns an array of winning tiles or an empty array if there are no winners
	function tileWins() {
		//For every tile on the board, check if it forms a winning line
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[0]; col++) {
				var startTile = BOARD[row][col];

				if(startTile !== ' ') {
					var hMoves = [];
					var vMoves = [];
					var aMoves = [];
					var dMoves = [];

					//Check if the start tile forms a winning
					for(inc=0; inc<SETTINGS.TILES_TO_WIN; inc++) {
						var validRow = (row+inc) < SETTINGS.BOARD_DIMENSIONS[0];
						var validCol = (col+inc) < SETTINGS.BOARD_DIMENSIONS[1];
						var validCol2 = (col-inc) < SETTINGS.BOARD_DIMENSIONS[1];

						if (validRow && BOARD[row+inc][col] === startTile) hMoves.push([row+inc, col]);
						if (validCol && BOARD[row][col+inc] === startTile) vMoves.push([row, col+inc]);
						if (validRow && validCol && BOARD[row+inc][col+inc] === startTile) aMoves.push([row+inc, col+inc]);
						if (validRow && validCol2 && BOARD[row+inc][col-inc] === startTile) dMoves.push([row+inc, col-inc]);
					}

					if(hMoves.length === SETTINGS.TILES_TO_WIN) return hMoves;
					if(vMoves.length === SETTINGS.TILES_TO_WIN) return vMoves;	
					if(aMoves.length === SETTINGS.TILES_TO_WIN) return aMoves;	
					if(dMoves.length === SETTINGS.TILES_TO_WIN) return dMoves;						
				}

			}
		}

		return [];
	}

	function checkFull() {
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				if (BOARD[row][col] === ' ') return false;
			}
		}
		return true;
	}

	function checkEmpty() {
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				if (BOARD[row][col] !== ' ') return false;
			}
		}
		return true;
	}

	function valid(move) {
		return SETTINGS.BOARD_DIMENSIONS[0] > move[0] && 
			   SETTINGS.BOARD_DIMENSIONS[1] > move[1] && 
			   BOARD[move[0]][move[1]] === ' ';
	}

	//Checks if the player is a bot
	function isBot(player){
		var playerName = player || PLAYERS[TURN === 'X' ? 0 : 1];
		return BOTS.indexOf(playerName) > -1;
	}

	//Initiates the turn actions (bot move, timer)
	function startTurn() {
		//Stop timer if it's already running
		stopTimer();

		//If the timer is set to run
		if(SETTINGS.TIMEOUT !== 0) {
			TIMER = setInterval(decrementTimer, 1000);	
		}

		if(isBot()) {
			botMove();
			$('table').addClass('disabled');
		} else {
			$('table').removeClass('disabled');
		}
	}


	////**** UI FUNCTIONS ****////

	function stopTimer() {
		clearInterval(TIMER);
		TIME = SETTINGS.TIMEOUT;
		$('#timer').removeClass().text(TIME < 10 ? '0' + TIME : TIME);
	}

	function startGame(replay) {
		if(replay) {
			TURN = WHO_STARTS_NEXT;
			WHO_STARTS_NEXT = WHO_STARTS_NEXT === 'X' ? 'O' : 'X';
			BOARD = makeEmptyBoard();

			$('td').removeClass().text(' ');			
		}

		$('table').removeClass().addClass(TURN.toLowerCase() + '-turn');
		$('.game-overlay').fadeOut(1000).removeClass('x-wins o-wins');

		startTurn();
	}

	//Resets the game without declaring an outcome
	function resetGame() {
		stopTimer();

		$('.game-overlay h3, #play-again').hide();
		$('#start-game').show();
		$('.game-overlay').removeClass('x-wins o-wins').fadeIn(1000);
		$('table').addClass('reset');
	}

	//Resets the game declaring an outcome
	function endGame(reason, winningMoves) {
		var winnerClass, outcomeText, overlayDelay;

		if(TIME > 0 ) stopTimer();

		switch(reason) {

			case 'winningMove':
				winnerClass = TURN.toLowerCase() + '-wins';
				outcomeText = PLAYERS[TURN === 'X' ? 0 : 1] + " Wins";
				overlayDelay = 1000;
				SCORES[TURN === 'X' ? 0 : 1]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				for (var i = 0; i < winningMoves.length; i++) {
					$('table>tbody>tr:nth-child('+ (winningMoves[i][0]+1) +')>td:nth-child(' + (winningMoves[i][1]+1) + ')').addClass('win');
				}
				break;

			case 'timeout':
				winnerClass = TURN.toLowerCase() + '-wins';
				outcomeText = PLAYERS[TURN === 'X' ? 1 : 0] + ' <span class="danger">Timed Out!</span><br><br>' + PLAYERS[TURN === 'X' ? 0 : 1] + " Wins";
				overlayDelay = 0;
				SCORES[TURN === 'X' ? 0 : 1]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				break;

			case 'invalidMove':
				winnerClass = TURN === 'X' ? 'o-wins' : 'x-wins';
				outcomeText =  '<span class="danger">Invalid Move</span> by ' + PLAYERS[TURN === 'X' ? 0 : 1] + "<br><br>" + PLAYERS[TURN === 'X' ? 1 : 0] + " Wins";
				overlayDelay = 0;
				SCORES[TURN === 'X' ? 1 : 0]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				break;

			case 'tie':
				winnerClass = '';
				outcomeText = "It's a Tie";
				overlayDelay = 400;
				break;
		}

		$('.game-overlay h3').html(outcomeText).show();
		$('.game-overlay').addClass(winnerClass).delay(overlayDelay).fadeIn(1000);
		$('#play-again').show();
		$('#start-game').hide();
		$('table').addClass('ended ' + winnerClass).removeClass('o-turn x-turn');
	}

	function putMove(move) {
		if(valid(move)) {
			BOARD[move[0]][move[1]] = TURN;
			$('table>tbody>tr:nth-child('+ (move[0]+1) +')>td:nth-child(' + (move[1]+1) + ')').addClass((isBot() ? 'animate ' : '') + TURN.toLowerCase()).text(TURN);

			var winningMoves = tileWins();
			if(checkFull() || winningMoves.length) {
				endGame(winningMoves.length ? 'winningMove' : 'tie', winningMoves);
			} else {
				$('table').toggleClass('o-turn x-turn');
				TURN = TURN === 'X' ? 'O' : 'X';
				//If the game is not in a reset state, keep going
			 	startTurn();
			}
		} else {
			endGame('invalidMove');
		}
	}

	//Rebuilds the board with new dimensions
	function resizeBoard() {
		BOARD = makeEmptyBoard();

		var newTable = "";
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			newTable += "<tr>";
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				newTable += "<td></td>";
			}
			newTable += "</tr>";
		}
		$('tbody').html(newTable);

		//Bind new tiles to event handler
		$('table td').click(humanMove);

		resizeTiles();

		//Resets everything for a new game
		resetGame();
	}

	//Resize the tiles to keep the board pixel size the same
	function resizeTiles() {
		totalW = $('section').width();
		tileSize = totalW/Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1]);

		$('td').css({'width':tileSize, 'height':tileSize, fontSize:tileSize*0.8});
	}

	//Refreshes UI values to match SETTINGS
	function refreshValues() {
		$('#in_row').val(SETTINGS.BOARD_DIMENSIONS[0]);
		$('#in_col').val(SETTINGS.BOARD_DIMENSIONS[1]);
		$('#in_timeout').val(SETTINGS.TIMEOUT);
		$('#in_tiles_to_win').val(SETTINGS.TILES_TO_WIN);

		$('#timer').removeClass().text(SETTINGS.TIMEOUT);
	}

	function decrementTimer(){
		TIME--;
		$('#timer').text(TIME < 10 ? '0' + TIME : TIME);
		if(TIME <= 10) $('#timer').addClass('danger');
		if(TIME === 0) {
			TURN = TURN === 'X' ? 'O' : 'X';
			endGame('timeout');
			clearInterval(TIMER);
		}
	}


	////**** AJAX REQUESTS ****////

	//Get a move from a Bot
	function botMove(){
		$.post('/nextMove', { 'player':PLAYERS[TURN === 'X' ? 0 : 1], 'board':String(BOARD), 'turn':TURN }, function(rawMove){
            var move = eval(rawMove.replace("(","[").replace(")","]"));
            var moveDelay = checkEmpty() ? 1300 : 300;
          
            //Make sure the timer is still valid and the board hasn't been reset
			if ((SETTINGS.TIMEOUT === 0 || TIME > 0) && !$('table').hasClass('reset')) setTimeout(function(){putMove(move)}, moveDelay);
		});
	}

	//Update back-end settings using localStorage
	function syncSettings(){
		$.post('/syncSettings', {'settings':JSON.stringify(SETTINGS)});
	}


	////**** HANDLER FUNCTIONS ****////

	function botOver (event, ui) {
		var botName = ui.draggable.text();

		ui.draggable.fadeTo(100,0);
		$(this).val(botName);

	}

	function botOut (event, ui) {
		var playerName = PLAYERS[$(this).hasClass('x') ? 0 : 1];

		ui.draggable.fadeTo(100,1);
		$(this).val(playerName);
	}

	function botDropped( event, ui ) {
		var botName = ui.draggable.text();
		var iconClass = $(this).hasClass('x') ? '.fa.x' : '.fa.o';

		PLAYERS[$(this).hasClass('x') ? 0 : 1] = botName;

		$(this).val(botName).addClass('bot');
		$(iconClass).fadeIn().css("display","inline");
    }

    function startedDragging(){
		$('body').addClass('dragging');
	}

    function stoppedDragging(){
		var elem = $(this);

		$('body').removeClass('dragging');

		setTimeout(function(){
			elem.fadeTo(300,1);
		}, 300);
	}

	function updateName(el){
		var newName = $(el.target).val();
		var playerIdx = $(el.target).hasClass('x') ? 0 : 1;
		var iconClass = $(this).hasClass('x') ? '.fa.x' : '.fa.o';

		//If the name is valid, update
		if(newName && newName.length) {
			PLAYERS[playerIdx] = newName;
			if(isBot(newName)) {
				$(el.target).addClass('bot');
				$(iconClass).fadeIn().css("display","inline");;
			} else {
				$(el.target).removeClass('bot');
				$(iconClass).fadeOut();
			}
		//Else, reset
		} else {
			$(el.target).val(PLAYERS[playerIdx]);
		}
	}

	function blurInput(ev) {
	    if(ev.which == 13) $(this).blur();  
	}

	function selectAll() {	
		this.select();
	}

	function humanMove(el){
		var td = el.target;
		var table = $(td).closest('table');
		var row = $(td).parent('tr').index();
		var col = $(td).index();

		if (!table.hasClass('ended') && valid([row,col])) putMove([row,col]);	
	}

	function saveSettings() {
		var newRow = $('#in_row').val();
		var newCol = $('#in_col').val();
		var newTilesToWin = $('#in_tiles_to_win').val();
		var newTimeout = $('#in_timeout').val();

		if(newRow && !isNaN(newRow) && newRow >= 3 && newRow <= 20) {
			SETTINGS.BOARD_DIMENSIONS[0] = parseInt(newRow);
		} else {
			$('#in_row').val(SETTINGS.BOARD_DIMENSIONS[0]);
		}
			
		if(newCol && !isNaN(newCol) && newCol >= 3 && newCol <= 20) {
			SETTINGS.BOARD_DIMENSIONS[1] = parseInt(newCol);
		} else {
			$('#in_col').val(SETTINGS.BOARD_DIMENSIONS[1]);
		}

		if(newTilesToWin && !isNaN(newTilesToWin) && newTilesToWin >= 3 && newTilesToWin <= Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1])) {
			SETTINGS.TILES_TO_WIN = parseInt(newTilesToWin);
		} else {
			$('#in_tiles_to_win').val(Math.min(SETTINGS.TILES_TO_WIN, Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1])));
		}

		if(newTimeout && !isNaN(newTimeout) && newTimeout >= 0) {
			SETTINGS.TIMEOUT = parseInt(newTimeout);
		} else {
			$('#in_timeout').val(SETTINGS.TIMEOUT);
		}
		
		//Save to browser storage	
		localStorage.settings = JSON.stringify(SETTINGS);

		//Update settings on the backend
		syncSettings();

		resizeBoard();
	}


	////**** EVENT HANDLERS ****////

	$('table td').click(humanMove);
	$('#save-settings').click(saveSettings);
	$('#start-game').click(function(){ startGame(false); });
	$('#play-again').click(function(){ startGame(true); });
	$('input.x, input.o').click(selectAll).keypress(blurInput).focusout(updateName).droppable({classes: { "ui-droppable-active": "droppable" }, drop:botDropped, over:botOver, out:botOut });
  	$( ".bots li" ).draggable({revert:true, classes: { "ui-draggable-dragging": "highlight" },  start:startedDragging, stop:stoppedDragging });
	$(window).resize(resizeTiles);

	
	////**** RUN PAGE SCRIPTS ****////
	if(localStorage.settings) syncSettings();
	refreshValues();
	resizeBoard();


	$('.typeahead').typeahead({
		minLength: 2,
		fitToElement:true,
		source: BOTS,
		afterSelect: function(){
			$(this.$element).blur();
		}
	});
	
});