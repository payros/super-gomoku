//Set default settings
var SETTINGS = {
	"BOARD_DIMENSIONS":[#{rawJS $ show (boardSize !! 0)}, #{rawJS $ show (boardSize !! 1)}],
	"TILES_TO_WIN":#{rawJS $ show tilesToWin},
	"TIMEOUT":#{rawJS $ show timeout} //In seconds	
};

var DEFEATED = [];

//When page ready
$(function(){

	////**** GLOBAL VARIABLES ****////

	var TIME, TIMER, STARTING_PLAYERS, STATS, BOTS_TO_BEAT;
	var BOARD = makeEmptyBoard();
	var TURN = 'X';
	var WHO_STARTS_NEXT = 'O';
	var SCORES = [0,0];
	var PLAYERS = ['Player1', 'Player2'];
	var BOTS = #{rawJS $ show $ playersList};
	SETTINGS = localStorage.settings ? JSON.parse(localStorage.settings) : SETTINGS;
	DEFEATED = localStorage.defeated ? JSON.parse(localStorage.defeated) : DEFEATED;
	PLAYERS = localStorage.players ? JSON.parse(localStorage.players) : PLAYERS;

	////**** UTILITY FUNCTIONS ****////

	function makeEmptyBoard() {
		var board = [];
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			board.push([]);
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				board[row].push(' ');
			}
		}
		return board;
	}

	//Returns an array of winning tiles or an empty array if there are no winners
	function tileWins() {
		//For every tile on the board, check if it forms a winning line
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				var startTile = BOARD[row][col];

				if(startTile !== ' ') {
					var hMoves = [];
					var vMoves = [];
					var aMoves = [];
					var dMoves = [];

					//Check if the start tile forms a winning
					for(inc=0; inc<SETTINGS.TILES_TO_WIN; inc++) {
						var validRow = (row+inc) < SETTINGS.BOARD_DIMENSIONS[0];
						var validCol = (col+inc) < SETTINGS.BOARD_DIMENSIONS[1];
						var validCol2 = (col-inc) < SETTINGS.BOARD_DIMENSIONS[1];

						if (validRow && BOARD[row+inc][col] === startTile) hMoves.push([row+inc, col]);
						if (validCol && BOARD[row][col+inc] === startTile) vMoves.push([row, col+inc]);
						if (validRow && validCol && BOARD[row+inc][col+inc] === startTile) aMoves.push([row+inc, col+inc]);
						if (validRow && validCol2 && BOARD[row+inc][col-inc] === startTile) dMoves.push([row+inc, col-inc]);
					}

					if(hMoves.length === SETTINGS.TILES_TO_WIN) return hMoves;
					if(vMoves.length === SETTINGS.TILES_TO_WIN) return vMoves;	
					if(aMoves.length === SETTINGS.TILES_TO_WIN) return aMoves;	
					if(dMoves.length === SETTINGS.TILES_TO_WIN) return dMoves;						
				}

			}
		}

		return [];
	}

	function checkFull() {
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				if (BOARD[row][col] === ' ') return false;
			}
		}
		return true;
	}

	function checkEmpty() {
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				if (BOARD[row][col] !== ' ') return false;
			}
		}
		return true;
	}

	function valid(move) {
		return SETTINGS.BOARD_DIMENSIONS[0] > move[0] && 
			   SETTINGS.BOARD_DIMENSIONS[1] > move[1] && 
			   BOARD[move[0]][move[1]] === ' ';
	}

	//Checks if the player is a bot
	function isBot(player){
		var playerName = player || PLAYERS[TURN === 'X' ? 0 : 1];
		return BOTS.indexOf(playerName) > -1;
	}

	//Initiates the turn actions (bot move, timer)
	function startTurn() {
		//Stop timer if it's already running
		stopTimer();

		//If the timer is set to run
		if(SETTINGS.TIMEOUT !== 0) {
			TIMER = setInterval(decrementTimer, 1000);	
		}

		if(isBot()) {
			botMove();
			$('#game-table').addClass('disabled');
		} else {
			$('#game-table').removeClass('disabled');
		}
	}

	function saveStats(winner, loser) {
		var P1 = PLAYERS[0];
		var P2 = PLAYERS[1];
		var P1BOT = isBot(P1);
		var P2BOT = isBot(P2);
		var WBOT = isBot(winner);
		var LBOT = isBot(loser);

		//Both players are human, return
		if(!P1BOT && !P2BOT) return;

		//It's a tie
		if(winner === '' && loser === '') {
			if(P1BOT) updateBotStats(P1, 'tied', LBOT ? 'bot' : 'human');
			if(P2BOT) updateBotStats(P2, 'tied', LBOT ? 'bot' : 'human');

		// There is a winner
		} else {
			if(WBOT) updateBotStats(winner, 'won', LBOT ? 'bot' : 'human');
			if(LBOT) updateBotStats(loser, 'lost', WBOT ? 'bot' : 'human');

			if(!WBOT && LBOT) updateHumanStats(loser);
		}
	}

	function updateHumanStats(loserBot) {
		
		//If this bot is not already on the list
		if(DEFEATED.indexOf(loserBot) === -1) {
			DEFEATED.push(loserBot);
			localStorage.defeated = JSON.stringify(DEFEATED);
			$('#next-bot').css({'display':'inline-block'});
		}
	}

	function getStatsByBot(name) {
		for (var i = 0; i < STATS.length; i++) {
			if(STATS[i].name === name) return STATS[i];
		};
		return {};
	}

	function compareBots(bot1, bot2) {
		var b1 = getStatsByBot(bot1);
		var b2 = getStatsByBot(bot2);

		var b1Points = 0;
		b1Points += b1.winsVsBots*2;
		b1Points += b1.winsVsHumans*1;
		b1Points += b1.lossesVsHumans*(-1);
		b1Points += b1.lossesVsBots*(-2);

		var b2Points = 0;
		b2Points += b2.winsVsBots*2;
		b2Points += b2.winsVsHumans*1;
		b2Points += b2.lossesVsHumans*(-1);
		b2Points += b2.lossesVsBots*(-2);

		return b2Points - b1Points;
	}

	function getSuccess(stats) {
		var totalH = stats.winsVsHumans + stats.tiesVsHumans + stats.lossesVsHumans;
		var totalB = stats.winsVsBots + stats.tiesVsBots + stats.lossesVsBots;

		var successH = totalH ? stats.winsVsHumans/totalH : 0;
		var successB = totalB ? stats.winsVsBots/totalB : 0;
		var successT = totalH && totalB ? (totalH+totalB)/2 : totalH+totalB;

		return {
			humans: successH*100,
			bots: successB*100,
			total: successT*100
		};
	}

	function getGetOrdinal(n) {
	    var s=["th","st","nd","rd"],
	    v=n%100;
	    return n+(s[(v-20)%10]||s[v]||s[0]);
	 }

	////**** UI FUNCTIONS ****////

	function stopTimer() {
		clearInterval(TIMER);
		TIME = SETTINGS.TIMEOUT;
		$('#timer').removeClass('danger').text(TIME < 10 ? '0' + TIME : TIME);
	}

	function startGame(replay) {
		STARTING_PLAYERS = [PLAYERS[0], PLAYERS[1]];

		if(replay) {
			TURN = WHO_STARTS_NEXT;
			WHO_STARTS_NEXT = WHO_STARTS_NEXT === 'X' ? 'O' : 'X';
			BOARD = makeEmptyBoard();

			$('#game-table td').removeClass().text(' ');			
		}

		$('#game-table, #timer').removeClass().addClass(TURN.toLowerCase() + '-turn');
		$('.game-overlay').fadeOut(1000).removeClass('x-wins o-wins');
		$('#next-bot').hide();

		startTurn();
	}

	//Resets the game without declaring an outcome
	function resetGame() {
		stopTimer();

		$('.game-overlay h3, #play-again, #next-bot').hide();
		$('#start-game').show();
		$('.game-overlay').removeClass('x-wins o-wins').fadeIn(1000);
		$('#game-table, #timer').removeClass();
		$('#game-table').addClass('reset');
	}

	//Resets the game declaring an outcome
	function endGame(reason, winningMoves) {
		var winner, loser, winnerClass, outcomeText, overlayDelay;

		if(TIME > 0 ) stopTimer();

		switch(reason) {

			case 'winningMove':
				winner = PLAYERS[TURN === 'X' ? 0 : 1];
				loser = PLAYERS[TURN === 'X' ? 1 : 0];
				winnerClass = TURN.toLowerCase() + '-wins';
				outcomeText = winner + " Wins";
				overlayDelay = 1000;
				SCORES[TURN === 'X' ? 0 : 1]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				for (var i = 0; i < winningMoves.length; i++) {
					$('#game-table>tbody>tr:nth-child('+ (winningMoves[i][0]+1) +')>td:nth-child(' + (winningMoves[i][1]+1) + ')').addClass('win');
				}
				break;

			case 'timeout':
				winner = PLAYERS[TURN === 'X' ? 0 : 1];
				loser = PLAYERS[TURN === 'X' ? 1 : 0];
				winnerClass = TURN.toLowerCase() + '-wins';
				outcomeText = loser + ' <span class="danger">Timed Out!</span><br><br>' + winner + " Wins";
				overlayDelay = 0;
				SCORES[TURN === 'X' ? 0 : 1]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				break;

			case 'invalidMove':
				winner = PLAYERS[TURN === 'X' ? 1 : 0];
				loser = PLAYERS[TURN === 'X' ? 0 : 1];
				winnerClass = TURN === 'X' ? 'o-wins' : 'x-wins';
				outcomeText =  '<span class="danger">Invalid Move</span> by ' + loser + "<br><br>" + winner + " Wins";
				overlayDelay = 0;
				SCORES[TURN === 'X' ? 1 : 0]++;
				$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
				break;

			case 'tie':
				winner = '';
				loser = '';
				winnerClass = '';
				outcomeText = "It's a Tie";
				overlayDelay = 400;
				break;
		}

		//If the starting players and ending players are the same, save the stats
		if(STARTING_PLAYERS[0] === PLAYERS[0] && STARTING_PLAYERS[1] === PLAYERS[1]) saveStats(winner,loser);
		$('.game-overlay h3').html(outcomeText).show();
		$('.game-overlay').addClass(winnerClass).delay(overlayDelay).fadeIn(1000);
		$('#play-again').css({'display':'inline-block'});
		$('#start-game').hide();
		$('#game-table').addClass('ended ' + winnerClass).removeClass('o-turn x-turn');
		$('#timer').removeClass();
	}

	function putMove(move) {
		if(valid(move)) {
			BOARD[move[0]][move[1]] = TURN;
			$('#game-table>tbody>tr:nth-child('+ (move[0]+1) +')>td:nth-child(' + (move[1]+1) + ')').addClass((isBot() ? 'animate ' : '') + TURN.toLowerCase()).text(TURN);

			var winningMoves = tileWins();
			if(checkFull() || winningMoves.length) {
				endGame(winningMoves.length ? 'winningMove' : 'tie', winningMoves);
			} else {
				$('#game-table, #timer').toggleClass('o-turn x-turn');
				TURN = TURN === 'X' ? 'O' : 'X';
				//If the game is not in a reset state, keep going
			 	startTurn();
			}
		} else {
			endGame('invalidMove');
		}
	}

	//Rebuilds the board with new dimensions
	function resizeBoard() {
		BOARD = makeEmptyBoard();

		var newTable = "";
		for (row=0; row<SETTINGS.BOARD_DIMENSIONS[0]; row++) {
			newTable += "<tr>";
			for (col=0; col<SETTINGS.BOARD_DIMENSIONS[1]; col++) {
				newTable += "<td></td>";
			}
			newTable += "</tr>";
		}
		$('#game-table tbody').html(newTable);

		//Bind new tiles to event handler
		$('#game-table td').click(humanMove);

		resizeTiles();

		//Resets everything for a new game
		resetGame();
	}

	//Resize the tiles to keep the board pixel size the same
	function resizeTiles() {
		totalW = $('main').width();
		tileSize = totalW/Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1]);

		$('#game-table td').css({'width':tileSize, 'height':tileSize, fontSize:tileSize*0.8});
		$('main').delay(200).fadeTo(600, 1);
	}

	//Refreshes UI values to match SETTINGS
	function refreshValues() {
		$('#in_row').val(SETTINGS.BOARD_DIMENSIONS[0]);
		$('#in_col').val(SETTINGS.BOARD_DIMENSIONS[1]);
		$('#in_timeout').val(SETTINGS.TIMEOUT);
		$('#in_tiles_to_win').val(SETTINGS.TILES_TO_WIN);

		$('input.x').val(PLAYERS[0]);
		$('input.o').val(PLAYERS[1]);
		updateName({'target':'input.o'});
		updateName({'target':'input.x'});

		$('#timer').removeClass().text(SETTINGS.TIMEOUT);
	}

	//Refreshes UI to include checkmark next to defeated bots
	function refreshBotList() {
		BOTS.sort(compareBots);
		if(!BOTS_TO_BEAT) BOTS_TO_BEAT = BOTS.slice().reverse(); //Copy the array so we know which bot comes next
		if(!localStorage.players) setStarterBot();
		$('.bots li').each(function(i, el){
			var isDefeated = DEFEATED.indexOf(BOTS[i]) > -1;
			$(el).toggleClass('defeated', isDefeated).text(BOTS[i]);
		});
	}

	function decrementTimer(){
		TIME--;
		$('#timer').text(TIME < 10 ? '0' + TIME : TIME);
		if(TIME <= 10) $('#timer').addClass('danger');
		if(TIME === 0) {
			TURN = TURN === 'X' ? 'O' : 'X';
			endGame('timeout');
			clearInterval(TIMER);
		}
	}

	function updateDialog(botname) {
		var bot = getStatsByBot(botname);
		var rank = BOTS.indexOf(botname)+1;
		var oRank = getGetOrdinal(rank);
		var rankClasses = "";
		var success = getSuccess(bot);
		var humanSuccess = (bot.winsVsHumans + bot.lossesVsHumans + bot.tiesVsHumans) ? (success.humans).toFixed() + '%' : 'N/A';
		var botSuccess = (bot.winsVsBots + bot.lossesVsBots + bot.tiesVsBots) ? (success.bots).toFixed() + '%' : 'N/A';
		var defeated = DEFEATED.indexOf(botname) > -1;

		for(var i=1; i<=BOTS.length; i++) {
			rankClasses += ' rank-' + i;
		}

		$('#stats-dialog').removeClass(rankClasses).addClass('rank-' + rank);
		$('.dialog-header h2').html(bot.name + ' <span>by <a target="_blank" href="http://github.com/' + bot.author + '" title="Go to ' + bot.author + '\'s github profile">@' + bot.author + '</a></span>');
		$('.dialog-body .rank').text('Ranks ' + oRank + ' out of ' + BOTS.length);
		$('#stats-table > tbody > tr:nth-child(1) > td:nth-child(2)').text(bot.winsVsHumans);
		$('#stats-table > tbody > tr:nth-child(1) > td:nth-child(3)').text(bot.tiesVsHumans);
		$('#stats-table > tbody > tr:nth-child(1) > td:nth-child(4)').text(bot.lossesVsHumans);
		$('#stats-table > tbody > tr:nth-child(1) > td:nth-child(5)').text(humanSuccess);
		$('#stats-table > tbody > tr:nth-child(2) > td:nth-child(2)').text(bot.winsVsBots);
		$('#stats-table > tbody > tr:nth-child(2) > td:nth-child(3)').text(bot.tiesVsBots);
		$('#stats-table > tbody > tr:nth-child(2) > td:nth-child(4)').text(bot.lossesVsBots);
		$('#stats-table > tbody > tr:nth-child(2) > td:nth-child(5)').text(botSuccess);
		$('.dialog-body .defeated').toggle(defeated);

		//Set Buttons Listeners
		$('.dialog-footer button.x').unbind().click(function(){
			$('input.x').val(botname);
			updateName({'target':'input.x'});
			$( "#stats-dialog" ).dialog( "close" );
		});

		$('.dialog-footer button.o').unbind().click(function(){
			$('input.o').val(botname);
			updateName({'target':'input.o'});
			$( "#stats-dialog" ).dialog( "close" );
		});

	}


	////**** AJAX REQUESTS ****////

	//Get a move from a Bot
	function botMove(){
		$.ajax({
			type:'POST',
			url:'/nextMove',
			data:{
				'player':PLAYERS[TURN === 'X' ? 0 : 1],
				'board':String(BOARD),
				'turn':TURN,
				'settings':JSON.stringify(SETTINGS)
			}, 
			success: function(rawMove){
	            var move = eval(rawMove.replace("(","[").replace(")","]"));
	            var moveDelay = checkEmpty() ? 1300 : 300;
	            //Make sure the game hasn't ended and the board hasn't been reset
				if (!$('#game-table').hasClass('ended') && !$('#game-table').hasClass('reset')) setTimeout(function(){putMove(move)}, moveDelay);
			}, 
			error: function(err){
				//The Bot probably messed something up
				if(err.status === 500) {
					putMove([21,21]);
				//Something else happened. Reset the game
				} else {
					resizeBoard();
				}
			}
		});
	}

	//Updates bot stats in database
	function updateBotStats(bot, outcome, opponent) {
		$.post('/results',
			{
				'bot':bot,
				'outcome': outcome,
				'opponent':opponent,
			}, function(newStats) {
				STATS = newStats;
				refreshBotList();
		});
	}

	function syncStats() {
		$.get('/stats', function(stats) {
			STATS = stats;
			refreshBotList();
		});
	};

	////**** HANDLER FUNCTIONS ****////

	function botOver (event, ui) {
		var botName = ui.draggable.text();

		ui.draggable.fadeTo(100,0);
		$(this).val(botName);

	}

	function botOut (event, ui) {
		var playerName = PLAYERS[$(this).hasClass('x') ? 0 : 1];

		ui.draggable.fadeTo(100,1);
		$(this).val(playerName);
	}

	function botDropped( event, ui ) {
		var botName = ui.draggable.text();
		var iconClass = $(this).hasClass('x') ? '.fa.x' : '.fa.o';

		PLAYERS[$(this).hasClass('x') ? 0 : 1] = botName;
		localStorage.players = JSON.stringify(PLAYERS);

		$(this).val(botName).addClass('bot');
		$(iconClass).fadeIn().css("display","inline");
    }

    function startedDragging(){
		$('body').addClass('dragging');
	}

    function stoppedDragging(){
		var elem = $(this);

		$('body').removeClass('dragging');

		setTimeout(function(){
			elem.fadeTo(300,1);
		}, 300);
	}

	function updateName(el){
		var newName = $(el.target).val();
		var playerIdx = $(el.target).hasClass('x') ? 0 : 1;
		var iconClass = $(el.target).hasClass('x') ? '.fa.x' : '.fa.o';

		//If the name is valid, update
		if(newName && newName.length) {
			PLAYERS[playerIdx] = newName;
			localStorage.players = JSON.stringify(PLAYERS);

			if(isBot(newName)) {
				$(el.target).addClass('bot');
				$(iconClass).fadeIn().css("display","inline");
			} else {
				$(el.target).removeClass('bot');
				$(iconClass).fadeOut();
			}
		//Else, reset
		} else {
			$(el.target).val(PLAYERS[playerIdx]);
		}
	}

	function blurInput(ev) {
	    if(ev.which == 13) $(this).blur();  
	}

	function selectAll() {	
		this.select();
	}

	function humanMove(el){
		var td = el.target;
		var table = $(td).closest('#game-table');
		var row = $(td).parent('tr').index();
		var col = $(td).index();

		if (!table.hasClass('ended') && valid([row,col])) putMove([row,col]);	
	}

	function saveSettings() {
		var newRow = $('#in_row').val();
		var newCol = $('#in_col').val();
		var newTilesToWin = $('#in_tiles_to_win').val();
		var newTimeout = $('#in_timeout').val();

		if(newRow && !isNaN(newRow) && newRow >= 3 && newRow <= 20) {
			SETTINGS.BOARD_DIMENSIONS[0] = parseInt(newRow);
		} else {
			$('#in_row').val(SETTINGS.BOARD_DIMENSIONS[0]);
		}
			
		if(newCol && !isNaN(newCol) && newCol >= 3 && newCol <= 20) {
			SETTINGS.BOARD_DIMENSIONS[1] = parseInt(newCol);
		} else {
			$('#in_col').val(SETTINGS.BOARD_DIMENSIONS[1]);
		}

		if(newTilesToWin && !isNaN(newTilesToWin) && newTilesToWin >= 3) {
			tilesToWin = Math.min(newTilesToWin, Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1]));
		} else {
			tilesToWin = Math.min(SETTINGS.TILES_TO_WIN, Math.max(SETTINGS.BOARD_DIMENSIONS[0],SETTINGS.BOARD_DIMENSIONS[1]))
		}
		
		$('#in_tiles_to_win').val(tilesToWin);
		SETTINGS.TILES_TO_WIN = parseInt(tilesToWin);

		if(newTimeout && !isNaN(newTimeout) && newTimeout >= 0) {
			SETTINGS.TIMEOUT = parseInt(newTimeout);
		} else {
			$('#in_timeout').val(SETTINGS.TIMEOUT);
		}
		
		//Save to browser storage	
		localStorage.settings = JSON.stringify(SETTINGS);

		resizeBoard();
	}

	//Sets the second player to a Random
	function setRandomBot() {
		var playerClass = 'input.o';
  		var botIdx = Math.floor(Math.random() * BOTS.length); 
		$(playerClass).val(BOTS[botIdx]);
		updateName({'target':playerClass});
	}

	function setStarterBot() {
		var playerClass = 'input.o';
  		var bot = BOTS_TO_BEAT[0];
		$(playerClass).val(bot);
		updateName({'target':playerClass});		
	}

	function nextBot() {
		var playerClass = 'input.o';
		nextIdx = BOTS_TO_BEAT.indexOf($(playerClass).val())+1;
		$(playerClass).val(BOTS_TO_BEAT[nextIdx]);
		updateName({'target':playerClass});
		startGame(true);		
	}

	//Sets the second player to a Local Human
	function setLocal() {
		if($('input.x').hasClass('bot')) {
			$('input.x').val('Player1');
			updateName({'target':'input.x'});			
		}

		if($('input.o').hasClass('bot')) {
			$('input.o').val('Player2');
			updateName({'target':'input.o'});			
		}
	}


	//Sets the second player to a Remote Human
	function setRemote() {
		if($('input.x').hasClass('bot')) {
			$('input.x').val('Player1');
			updateName({'target':'input.x'});			
		}

		$('input.o').val('Remote');
		updateName({'target':'input.o'});
	}

	function showStats(ev) {
		updateDialog($(ev.target).text());
		$( "#stats-dialog" ).dialog({
			show: { effect: "fade", duration: 400 },
			hide: { effect: "fade", duration: 200 },
			width:500,
			resizable:false,
			modal:true,
			open: function(){
	            $('.ui-widget-overlay').click(function(){ $('#stats-dialog').dialog('close'); });
	        }
		});
	}

	////**** EVENT HANDLERS ****////

	$('#game-table td').click(humanMove);
	$('#save-settings').click(saveSettings);
	$('#random-bot').click(setRandomBot);
	$('#local-game').click(setLocal);
	$('#start-game').click(function(){ startGame(false); });
	$('#play-again').click(function(){ startGame(true); });
	$('#next-bot').click(nextBot);
	$('.dialog-header .fa-close').click(function(){ $( "#stats-dialog" ).dialog( "close" ); });
	$('input.x, input.o').click(selectAll).keypress(blurInput).focusout(updateName).droppable({classes: { "ui-droppable-active": "droppable" }, drop:botDropped, over:botOver, out:botOut });
  	$( ".bots li" ).click(showStats).draggable({delay: 200, revert:true, classes: { "ui-draggable-dragging": "highlight" },  start:startedDragging, stop:stoppedDragging });
	$(window).resize(resizeTiles);

	
	////**** RUNTIME SCRIPTS ****////
	refreshValues();
	resizeBoard();
	syncStats();


	$('.typeahead').typeahead({
		minLength: 2,
		fitToElement:true,
		source: BOTS,
		afterSelect: function(){
			$(this.$element).blur();
		}
	});
	
});