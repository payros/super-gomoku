//When page ready
$(function(){
	//Utility Functions
	function getBoardDimensions() {
		var rows = $('table>tbody').children().length;
		var cols = $('table>tbody>tr:first').children().length;

		return [rows,cols];
	}

	function getEmptyBoard() {
		var board = [];
		for (row=0; row<BOARD_DIMENSIONS[0]; row++) {
			board.push([]);
			for (col=0; col<BOARD_DIMENSIONS[0]; col++) {
				board[row].push('');
			}
		}
		return board;
	}

	//Returns an array of winning tiles or an empty array if there are no winners
	function tileWins() {
		//For every tile on the board, check if it forms a winning line
		for (row=0; row<BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<BOARD_DIMENSIONS[0]; col++) {
				var startTile = BOARD[row][col];

				if(startTile !== '') {
					var hMoves = [];
					var vMoves = [];
					var aMoves = [];
					var dMoves = [];

					//Check if the start tile forms a winning
					for(inc=0; inc<TILES_TO_WIN; inc++) {
						var validRow = (row+inc) < BOARD_DIMENSIONS[0];
						var validCol = (col+inc) < BOARD_DIMENSIONS[1];
						var validCol2 = (col-inc) < BOARD_DIMENSIONS[1];

						if (validRow && BOARD[row+inc][col] === startTile) hMoves.push([row+inc, col]);
						if (validCol && BOARD[row][col+inc] === startTile) vMoves.push([row, col+inc]);
						if (validRow && validCol && BOARD[row+inc][col+inc] === startTile) aMoves.push([row+inc, col+inc]);
						if (validRow && validCol2 && BOARD[row+inc][col-inc] === startTile) dMoves.push([row+inc, col-inc]);
					}

					if(hMoves.length === TILES_TO_WIN) return hMoves;
					if(vMoves.length === TILES_TO_WIN) return vMoves;	
					if(aMoves.length === TILES_TO_WIN) return aMoves;	
					if(dMoves.length === TILES_TO_WIN) return dMoves;						
				}

			}
		}

		return [];
	}

	function checkFull() {
		for (row=0; row<BOARD_DIMENSIONS[0]; row++) {
			for (col=0; col<BOARD_DIMENSIONS[0]; col++) {
				if (BOARD[row][col] === '') return false;
			}
		}
		return true;
	}

	function valid(move) {
		return BOARD[move[0]][move[1]] === '';
	}

	function startTimer() {
		//Stop timer if it's already running
		clearInterval(TIMER);

		TIME = MAX_TIME;
		$('#timer').removeClass().text(TIME < 10 ? '0' + TIME : TIME);
		TIMER = setInterval(decrementTimer, 1000);
	}

	//UI Functions
	function putMove(move) {
		if(valid(move)) {
			BOARD[move[0]][move[1]] = TURN;
			$('table>tbody>tr:nth-child('+ (move[0]+1) +')>td:nth-child(' + (move[1]+1) + ')').addClass(TURN.toLowerCase()).text(TURN)

			var winningMoves = tileWins();
			if(checkFull() || winningMoves.length) {
				endGame(winningMoves);
			} else {
				$('table').toggleClass('o-turn x-turn');
				TURN = TURN === 'X' ? 'O' : 'X';
				startTimer();
			}
		}
	}

	function endGame(winningMoves) {
		var winnerClass = ''
		var outcomeText = "It's a Tie";

		//If there is a clear winner
		if(winningMoves.length || !checkFull()) {
			winnerClass = TURN.toLowerCase() + '-wins';
			outcomeText = PLAYERS[TURN === 'X' ? 0 : 1] + " Wins";
			SCORES[TURN === 'X' ? 0 : 1]++;
			refreshScores();

			//If the player timed out
			if(!winningMoves.length) {
				outcomeText = PLAYERS[TURN === 'X' ? 1 : 0] + ' <span class="danger">Timed Out!</span><br><br>' + outcomeText;
			}
		}

		$('.end-game-overlay > h3').html(outcomeText);
		$('.end-game-overlay').addClass(winnerClass).fadeIn(1000);
		$('table').addClass('ended ' + winnerClass).removeClass('o-turn x-turn');
		for (var i = 0; i < winningMoves.length; i++) {
			$('table>tbody>tr:nth-child('+ (winningMoves[i][0]+1) +')>td:nth-child(' + (winningMoves[i][1]+1) + ')').addClass('win');
		};


	}

	function clearBoard() {
		//Setup variables
		TURN = WHO_STARTS_NEXT;
		WHO_STARTS_NEXT = WHO_STARTS_NEXT === 'X' ? 'O' : 'X';
		BOARD = getEmptyBoard();

		//Setup UI
		$('td').removeClass().text('');
		$('table').removeClass().addClass(TURN.toLowerCase() + '-turn');
		$('.end-game-overlay').fadeOut(1000).removeClass('x-wins o-wins');

		startTimer();
	}

	//Rebuilds the board with new dimensions
	function resizeBoard() {
	}

	function refreshScores() {
		$('.score').text(' ' + SCORES[0] + ' x ' + SCORES[1] + ' ');
	}

	function decrementTimer(){
		TIME--;
		$('#timer').text(TIME < 10 ? '0' + TIME : TIME);
		if(TIME <= 10) $('#timer').addClass('danger');
		if(TIME === 0) {
			TURN = TURN === 'X' ? 'O' : 'X';
			endGame([]);
			clearInterval(TIMER);
		}
	}

	//Global Variables
	// var TILES_TO_WIN = Getting it from the backend
	var TIME, TIMER;
	var MAX_TIME = 15; //In seconds
	var BOARD_DIMENSIONS = getBoardDimensions(); //Maybe we should get this from the backend as well?
	var BOARD = getEmptyBoard();
	var TURN = 'X';
	var WHO_STARTS_NEXT = 'O';
	var SCORES = [0,0];
	var PLAYERS = ['Player1', 'Player2'];

	//Event Handlers
	$('table td').click(function(el){
		var td = el.target;
		var table = $(td).closest('table');
		var row = $(td).parent('tr').index();
		var col = $(td).index();

		if (!table.hasClass('ended')) putMove([row,col]);	
	});

	$('#play-again').click(clearBoard);

	//Update player name
	$('input.x, input.o').focusout(function(el){
		var newName = $(el.target).val();
		var playerIdx = $(el.target).hasClass('x') ? 0 : 1;

		//If the name is valid, update
		if(newName && newName.length) {
			PLAYERS[playerIdx] = newName;
		//Else, reset
		} else {
			$(el.target).val(PLAYERS[playerIdx]);
		}
	});


	//Start timer for the first time
	startTimer();
});